From 3aeeaf31b7a7f888f54e47826e8ec0ddbe65c4bf Mon Sep 17 00:00:00 2001
From: File <noreply+automated@papermc.io>
Date: Sun, 20 Apr 1997 14:37:42 +0100
Subject: [PATCH] paper File Patches


diff --git a/net/minecraft/world/entity/animal/Bee.java b/net/minecraft/world/entity/animal/Bee.java
index 830f5124185dda1067dab4768884a69ec0b9b973..94244b148533ef026bf5c56abbc2bb5cfa83c938 100644
--- a/net/minecraft/world/entity/animal/Bee.java
+++ b/net/minecraft/world/entity/animal/Bee.java
@@ -141,10 +141,26 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     Bee.BeeGoToHiveGoal goToHiveGoal;
     private Bee.BeeGoToKnownFlowerGoal goToKnownFlowerGoal;
     private int underWaterTicks;
+    public net.kyori.adventure.util.TriState rollingOverride = net.kyori.adventure.util.TriState.NOT_SET; // Paper - Rolling override
 
     public Bee(EntityType<? extends Bee> entityType, Level level) {
         super(entityType, level);
-        this.moveControl = new FlyingMoveControl(this, 20, true);
+        // Paper start - Fix MC-167279
+        class BeeFlyingMoveControl extends FlyingMoveControl {
+            public BeeFlyingMoveControl(final Mob entity, final int maxPitchChange, final boolean noGravity) {
+                super(entity, maxPitchChange, noGravity);
+            }
+
+            @Override
+            public void tick() {
+                if (this.mob.getY() <= Bee.this.level().getMinY()) {
+                    this.mob.setNoGravity(false);
+                }
+                super.tick();
+            }
+        }
+        this.moveControl = new BeeFlyingMoveControl(this, 20, true);
+        // Paper end - Fix MC-167279
         this.lookControl = new Bee.BeeLookControl(this);
         this.setPathfindingMalus(PathType.DANGER_FIRE, -1.0F);
         this.setPathfindingMalus(PathType.WATER, -1.0F);
@@ -191,12 +207,19 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
 
     @Override
     public void addAdditionalSaveData(CompoundTag compound) {
+        // CraftBukkit start - selectively save data
+        this.addAdditionalSaveData(compound, true);
+    }
+
+    @Override
+    public void addAdditionalSaveData(CompoundTag compound, boolean includeAll) {
+        // CraftBukkit end
         super.addAdditionalSaveData(compound);
-        if (this.hasHive()) {
+        if (includeAll && this.hasHive()) { // CraftBukkit - selectively save hive
             compound.put("hive_pos", NbtUtils.writeBlockPos(this.getHivePos()));
         }
 
-        if (this.hasSavedFlowerPos()) {
+        if (includeAll && this.hasSavedFlowerPos()) { // CraftBukkit - selectively save hive
             compound.put("flower_pos", NbtUtils.writeBlockPos(this.getSavedFlowerPos()));
         }
 
@@ -237,7 +260,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
                 }
 
                 if (i > 0) {
-                    livingEntity.addEffect(new MobEffectInstance(MobEffects.POISON, i * 20, 0), this);
+                    livingEntity.addEffect(new MobEffectInstance(MobEffects.POISON, i * 20, 0), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
                 }
             }
 
@@ -492,7 +515,11 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         if (this.hivePos == null) {
             return null;
         } else {
-            return this.isTooFarAway(this.hivePos) ? null : this.level().getBlockEntity(this.hivePos, BlockEntityType.BEEHIVE).orElse(null);
+            // Paper start - move over logic to accommodate isTooFarAway with chunk load check
+            return this.isTooFarAway(this.hivePos) || this.level().getChunkIfLoadedImmediately(this.hivePos.getX() >> 4, this.hivePos.getZ() >> 4) == null
+                ? null
+                : this.level().getBlockEntity(this.hivePos, BlockEntityType.BEEHIVE).orElse(null);
+            // Paper end
         }
     }
 
@@ -525,6 +552,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     }
 
     public void setRolling(boolean isRolling) {
+        isRolling = this.rollingOverride.toBooleanOrElse(isRolling); // Paper - Rolling override
         this.setFlag(2, isRolling);
     }
 
@@ -581,7 +609,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
             if (beeInteractionEffect != null) {
                 this.usePlayerItem(player, hand, itemInHand);
                 if (!this.level().isClientSide) {
-                    this.addEffect(beeInteractionEffect);
+                    this.addEffect(beeInteractionEffect, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.FOOD); // Paper - Add missing effect cause
                 }
 
                 return InteractionResult.SUCCESS;
@@ -650,8 +678,9 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         if (this.isInvulnerableTo(level, damageSource)) {
             return false;
         } else {
+            if (!super.hurtServer(level, damageSource, amount)) return false; // CraftBukkit - Only stop pollinating if entity was damaged
             this.beePollinateGoal.stopPollinating();
-            return super.hurtServer(level, damageSource, amount);
+            return true; // CraftBukkit - Only stop pollinating if entity was damaged
         }
     }
 
@@ -772,7 +801,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     @VisibleForDebug
     public class BeeGoToHiveGoal extends Bee.BaseBeeGoal {
         public static final int MAX_TRAVELLING_TICKS = 2400;
-        int travellingTicks = Bee.this.level().random.nextInt(10);
+        int travellingTicks = Bee.this.random.nextInt(10); // CraftBukkit - SPIGOT-7495: Give Bees another chance and let them use their own random, avoid concurrency issues
         private static final int MAX_BLACKLISTED_TARGETS = 3;
         final List<BlockPos> blacklistedTargets = Lists.newArrayList();
         @Nullable
@@ -888,7 +917,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
 
     public class BeeGoToKnownFlowerGoal extends Bee.BaseBeeGoal {
         private static final int MAX_TRAVELLING_TICKS = 2400;
-        int travellingTicks = Bee.this.level().random.nextInt(10);
+        int travellingTicks = Bee.this.random.nextInt(10); // CraftBukkit - SPIGOT-7495: Give Bees another chance and let them use their own random, avoid concurrency issues
 
         BeeGoToKnownFlowerGoal() {
             this.setFlags(EnumSet.of(Goal.Flag.MOVE));
@@ -986,7 +1015,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
                             }
                         }
 
-                        if (blockState1 != null) {
+                        if (blockState1 != null && org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(Bee.this, blockPos, blockState1)) { // CraftBukkit
                             Bee.this.level().levelEvent(2011, blockPos, 15);
                             Bee.this.level().setBlockAndUpdate(blockPos, blockState1);
                             Bee.this.incrementNumCropsGrownSincePollination();
@@ -1010,7 +1039,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         @Override
         protected void alertOther(Mob mob, LivingEntity target) {
             if (mob instanceof Bee && this.mob.hasLineOfSight(target)) {
-                mob.setTarget(target);
+                mob.setTarget(target, org.bukkit.event.entity.EntityTargetEvent.TargetReason.TARGET_ATTACKED_ENTITY, true); // CraftBukkit - reason
             }
         }
     }
@@ -1168,7 +1197,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
                     Bee.this.dropFlower();
                     this.pollinating = false;
                     Bee.this.remainingCooldownBeforeLocatingNewFlower = 200;
-                } else {
+                } else if (Bee.this.savedFlowerPos != null) { // Paper - add null check since API can manipulate this
                     Vec3 vec3 = Vec3.atBottomCenterOf(Bee.this.savedFlowerPos).add(0.0, 0.6F, 0.0);
                     if (vec3.distanceTo(Bee.this.position()) > 1.0) {
                         this.hoverPos = vec3;
