From 3aeeaf31b7a7f888f54e47826e8ec0ddbe65c4bf Mon Sep 17 00:00:00 2001
From: File <noreply+automated@papermc.io>
Date: Sun, 20 Apr 1997 14:37:42 +0100
Subject: [PATCH] paper File Patches


diff --git a/net/minecraft/world/level/block/SaplingBlock.java b/net/minecraft/world/level/block/SaplingBlock.java
index d7b39aa323d9a6c28d1181c649a1481145203c2e..e014f052e9b0f5ca6b28044e2389782b7d0e0cb8 100644
--- a/net/minecraft/world/level/block/SaplingBlock.java
+++ b/net/minecraft/world/level/block/SaplingBlock.java
@@ -26,6 +26,7 @@ public class SaplingBlock extends BushBlock implements BonemealableBlock {
     protected static final float AABB_OFFSET = 6.0F;
     protected static final VoxelShape SHAPE = Block.box(2.0, 0.0, 2.0, 14.0, 12.0, 14.0);
     protected final TreeGrower treeGrower;
+    public static org.bukkit.TreeType treeType; // CraftBukkit
 
     @Override
     public MapCodec<? extends SaplingBlock> codec() {
@@ -45,7 +46,7 @@ public class SaplingBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     protected void randomTick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
-        if (level.getMaxLocalRawBrightness(pos.above()) >= 9 && random.nextInt(7) == 0) {
+        if (level.getMaxLocalRawBrightness(pos.above()) >= 9 && random.nextFloat() < (level.spigotConfig.saplingModifier / (100.0f * 7))) { // Spigot - SPIGOT-7159: Better modifier resolution
             this.advanceTree(level, pos, state, random);
         }
     }
@@ -54,7 +55,33 @@ public class SaplingBlock extends BushBlock implements BonemealableBlock {
         if (state.getValue(STAGE) == 0) {
             level.setBlock(pos, state.cycle(STAGE), 4);
         } else {
-            this.treeGrower.growTree(level, level.getChunkSource().getGenerator(), pos, state, random);
+            // CraftBukkit start
+            if (level.captureTreeGeneration) {
+                this.treeGrower.growTree(level, level.getChunkSource().getGenerator(), pos, state, random);
+            } else {
+                level.captureTreeGeneration = true;
+                this.treeGrower.growTree(level, level.getChunkSource().getGenerator(), pos, state, random);
+                level.captureTreeGeneration = false;
+                if (!level.capturedBlockStates.isEmpty()) {
+                    org.bukkit.TreeType treeType = SaplingBlock.treeType;
+                    SaplingBlock.treeType = null;
+                    org.bukkit.Location location = org.bukkit.craftbukkit.util.CraftLocation.toBukkit(pos, level.getWorld());
+                    java.util.List<org.bukkit.block.BlockState> blocks = new java.util.ArrayList<>(level.capturedBlockStates.values());
+                    level.capturedBlockStates.clear();
+                    org.bukkit.event.world.StructureGrowEvent event = null;
+                    if (treeType != null) {
+                        event = new org.bukkit.event.world.StructureGrowEvent(location, treeType, false, null, blocks);
+                        org.bukkit.Bukkit.getPluginManager().callEvent(event);
+                    }
+                    if (event == null || !event.isCancelled()) {
+                        for (org.bukkit.block.BlockState blockstate : blocks) {
+                            org.bukkit.craftbukkit.block.CapturedBlockState.setBlockState(blockstate);
+                            level.checkCapturedTreeStateForObserverNotify(pos, (org.bukkit.craftbukkit.block.CraftBlockState) blockstate); // Paper - notify observers even if grow failed
+                        }
+                    }
+                }
+            }
+            // CraftBukkit end
         }
     }
 
