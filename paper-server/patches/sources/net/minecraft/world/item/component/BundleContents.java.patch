From 3aeeaf31b7a7f888f54e47826e8ec0ddbe65c4bf Mon Sep 17 00:00:00 2001
From: File <noreply+automated@papermc.io>
Date: Sun, 20 Apr 1997 14:37:42 +0100
Subject: [PATCH] paper File Patches


diff --git a/net/minecraft/world/item/component/BundleContents.java b/net/minecraft/world/item/component/BundleContents.java
index 216f59f8677962d00d19ad2ebd5d06a79d753ad2..fae2ab8b2715b23f3bbabac094435c99a61ab937 100644
--- a/net/minecraft/world/item/component/BundleContents.java
+++ b/net/minecraft/world/item/component/BundleContents.java
@@ -25,6 +25,7 @@ public final class BundleContents implements TooltipComponent {
         .flatXmap(BundleContents::checkAndCreate, bundleContents -> DataResult.success(bundleContents.items));
     public static final StreamCodec<RegistryFriendlyByteBuf, BundleContents> STREAM_CODEC = ItemStack.STREAM_CODEC
         .apply(ByteBufCodecs.list())
+        .apply(ByteBufCodecs::increaseDepth) // Paper - Track codec depth
         .map(BundleContents::new, contents -> contents.items);
     private static final Fraction BUNDLE_IN_BUNDLE_WEIGHT = Fraction.getFraction(1, 16);
     private static final int NO_STACK_INDEX = -1;
@@ -76,6 +77,12 @@ public final class BundleContents implements TooltipComponent {
         return !stack.isEmpty() && stack.getItem().canFitInsideContainerItems();
     }
 
+    // Paper start - correct bundle inventory action
+    public int getMaxAmountToAdd(final ItemStack stack) {
+        return Mutable.getMaxAmountToAdd(stack, this.weight);
+    }
+    // Paper end - correct bundle inventory action
+
     public int getNumberOfItemsToShow() {
         int size = this.size();
         int i = size > 12 ? 11 : 12;
@@ -171,7 +178,13 @@ public final class BundleContents implements TooltipComponent {
         }
 
         public int getMaxAmountToAdd(ItemStack stack) {
-            Fraction fraction = Fraction.ONE.subtract(this.weight);
+        // Paper start - correct bundle inventory action
+        // Static overload to easily compute this value without the need for an instance of mutable.
+            return getMaxAmountToAdd(stack, this.weight);
+        }
+        static int getMaxAmountToAdd(final ItemStack stack, final Fraction weight) {
+            Fraction fraction = Fraction.ONE.subtract(weight);
+        // Paper end - correct bundle inventory action
             return Math.max(fraction.divideBy(BundleContents.getWeight(stack)).intValue(), 0);
         }
 
