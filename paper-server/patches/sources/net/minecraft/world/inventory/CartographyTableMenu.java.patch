From 6a0255d07a09045c7b0d3db3fa88ccfd06092226 Mon Sep 17 00:00:00 2001
From: File <noreply+automated@papermc.io>
Date: Sun, 20 Apr 1997 14:37:42 +0100
Subject: [PATCH] paper File Patches


diff --git a/net/minecraft/world/inventory/CartographyTableMenu.java b/net/minecraft/world/inventory/CartographyTableMenu.java
index 8e7f8ac97b7a1d780234b0a104536c117b475690..1c026632d50a163a14cc1be76e9c3e91ab2876d9 100644
--- a/net/minecraft/world/inventory/CartographyTableMenu.java
+++ b/net/minecraft/world/inventory/CartographyTableMenu.java
@@ -15,6 +15,21 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 
 public class CartographyTableMenu extends AbstractContainerMenu {
+    // CraftBukkit start
+    private org.bukkit.craftbukkit.inventory.CraftInventoryView bukkitEntity = null;
+    private org.bukkit.entity.Player player;
+
+    @Override
+    public org.bukkit.craftbukkit.inventory.CraftInventoryView getBukkitView() {
+        if (this.bukkitEntity != null) {
+            return this.bukkitEntity;
+        }
+
+        org.bukkit.craftbukkit.inventory.CraftInventoryCartography inventory = new org.bukkit.craftbukkit.inventory.CraftInventoryCartography(this.container, this.resultContainer);
+        this.bukkitEntity = new org.bukkit.craftbukkit.inventory.CraftInventoryView(this.player, inventory, this);
+        return this.bukkitEntity;
+    }
+    // CraftBukkit end
     public static final int MAP_SLOT = 0;
     public static final int ADDITIONAL_SLOT = 1;
     public static final int RESULT_SLOT = 2;
@@ -24,20 +39,8 @@ public class CartographyTableMenu extends AbstractContainerMenu {
     private static final int USE_ROW_SLOT_END = 39;
     private final ContainerLevelAccess access;
     long lastSoundTime;
-    public final Container container = new SimpleContainer(2) {
-        @Override
-        public void setChanged() {
-            CartographyTableMenu.this.slotsChanged(this);
-            super.setChanged();
-        }
-    };
-    private final ResultContainer resultContainer = new ResultContainer() {
-        @Override
-        public void setChanged() {
-            CartographyTableMenu.this.slotsChanged(this);
-            super.setChanged();
-        }
-    };
+    public final Container container; // Paper - Add missing InventoryHolders - move down
+    private final ResultContainer resultContainer; // Paper - Add missing InventoryHolders - move down
 
     public CartographyTableMenu(int containerId, Inventory playerInventory) {
         this(containerId, playerInventory, ContainerLevelAccess.NULL);
@@ -45,6 +48,34 @@ public class CartographyTableMenu extends AbstractContainerMenu {
 
     public CartographyTableMenu(int containerId, Inventory playerInventory, final ContainerLevelAccess access) {
         super(MenuType.CARTOGRAPHY_TABLE, containerId);
+        // Paper start - Add missing InventoryHolders - move down
+        this.container = new SimpleContainer(this.createBlockHolder(access), 2) { // Paper - Add missing InventoryHolders
+            @Override
+            public void setChanged() {
+                CartographyTableMenu.this.slotsChanged(this);
+                super.setChanged();
+            }
+            // CraftBukkit start
+            @Override
+            public org.bukkit.Location getLocation() {
+                return access.getLocation();
+            }
+            // CraftBukkit end
+        };
+        this.resultContainer = new ResultContainer(this.createBlockHolder(access)) { // Paper - Add missing InventoryHolders
+            @Override
+            public void setChanged() {
+                // CartographyTableMenu.this.slotsChanged(this); // Paper - Add CartographyItemEvent - do not recompute results if the result slot changes - allows to set the result slot via api
+                super.setChanged();
+            }
+            // CraftBukkit start
+            @Override
+            public org.bukkit.Location getLocation() {
+                return access.getLocation();
+            }
+            // CraftBukkit end
+        };
+        // Paper end - Add missing InventoryHolders - move down
         this.access = access;
         this.addSlot(new Slot(this.container, 0, 15, 15) {
             @Override
@@ -80,10 +111,12 @@ public class CartographyTableMenu extends AbstractContainerMenu {
             }
         });
         this.addStandardInventorySlots(playerInventory, 8, 84);
+        this.player = (org.bukkit.entity.Player) playerInventory.player.getBukkitEntity(); // CraftBukkit
     }
 
     @Override
     public boolean stillValid(Player player) {
+        if (!this.checkReachable) return true; // CraftBukkit
         return stillValid(this.access, player, Blocks.CARTOGRAPHY_TABLE);
     }
 
@@ -99,6 +132,7 @@ public class CartographyTableMenu extends AbstractContainerMenu {
         } else {
             this.resultContainer.removeItemNoUpdate(2);
         }
+        org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareResultEvent(this, RESULT_SLOT); // Paper - Add PrepareResultEvent
     }
 
     private void setupResultSlot(ItemStack map, ItemStack firstSlotStack, ItemStack resultOutput) {
