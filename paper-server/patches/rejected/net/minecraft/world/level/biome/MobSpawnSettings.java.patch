From 3aeeaf31b7a7f888f54e47826e8ec0ddbe65c4bf Mon Sep 17 00:00:00 2001
From: File <noreply+automated@papermc.io>
Date: Sun, 20 Apr 1997 14:37:42 +0100
Subject: [PATCH] paper File Patches


diff --git a/net/minecraft/world/level/biome/MobSpawnSettings.java b/net/minecraft/world/level/biome/MobSpawnSettings.java
index 3439ff4f32971d5062b7b55815b3175080971cfc..2d256b201df3afa1cf5879fdc931a1aa684110e4 100644
--- a/net/minecraft/world/level/biome/MobSpawnSettings.java
+++ b/net/minecraft/world/level/biome/MobSpawnSettings.java
@@ -75,8 +75,40 @@ public class MobSpawnSettings {
     }
 
     public static class Builder {
+        // Paper start - Perf: keep track of data in a pair set to give O(1) contains calls - we have to hook removals incase plugins mess with it
+        public static class MobList extends java.util.ArrayList<MobSpawnSettings.SpawnerData> {
+            java.util.Set<MobSpawnSettings.SpawnerData> biomes = new java.util.HashSet<>();
+
+            @Override
+            public boolean contains(Object o) {
+                return biomes.contains(o);
+            }
+
+            @Override
+            public boolean add(MobSpawnSettings.SpawnerData BiomeSettingsMobs) {
+                biomes.add(BiomeSettingsMobs);
+                return super.add(BiomeSettingsMobs);
+            }
+
+            @Override
+            public MobSpawnSettings.SpawnerData remove(int index) {
+                MobSpawnSettings.SpawnerData removed = super.remove(index);
+                if (removed != null) {
+                    biomes.remove(removed);
+                }
+                return removed;
+            }
+
+            @Override
+            public void clear() {
+                biomes.clear();
+                super.clear();
+            }
+        }
+        // use toImmutableEnumMap collector
         private final Map<MobCategory, List<MobSpawnSettings.SpawnerData>> spawners = Stream.of(MobCategory.values())
-            .collect(ImmutableMap.toImmutableMap(key -> (MobCategory)key, value -> Lists.newArrayList()));
+            .collect(Maps.toImmutableEnumMap(mobCategory -> (MobCategory)mobCategory, mobCategory -> new MobList())); // Use MobList instead of ArrayList
+        // Paper end - Perf: keep track of data in a pair set to give O(1) contains calls
         private final Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> mobSpawnCosts = Maps.newLinkedHashMap();
         private float creatureGenerationProbability = 0.1F;
 
