From 3aeeaf31b7a7f888f54e47826e8ec0ddbe65c4bf Mon Sep 17 00:00:00 2001
From: File <noreply+automated@papermc.io>
Date: Sun, 20 Apr 1997 14:37:42 +0100
Subject: [PATCH] paper File Patches


diff --git a/net/minecraft/world/item/CrossbowItem.java b/net/minecraft/world/item/CrossbowItem.java
index 6c2b98dba7cd862d28c634dfdedee58d0c1c42ae..96ece6ff2c4fe2ad4d9cea2340596cfd6a59c569 100644
--- a/net/minecraft/world/item/CrossbowItem.java
+++ b/net/minecraft/world/item/CrossbowItem.java
@@ -90,7 +90,14 @@ public class CrossbowItem extends ProjectileWeaponItem {
     public boolean releaseUsing(ItemStack stack, Level level, LivingEntity entity, int timeLeft) {
         int i = this.getUseDuration(stack, entity) - timeLeft;
         float powerForTime = getPowerForTime(i, stack, entity);
-        if (powerForTime >= 1.0F && !isCharged(stack) && tryLoadProjectiles(entity, stack)) {
+        // Paper start - Add EntityLoadCrossbowEvent
+        if (powerForTime >= 1.0F && !isCharged(stack)) {
+            final io.papermc.paper.event.entity.EntityLoadCrossbowEvent event = new io.papermc.paper.event.entity.EntityLoadCrossbowEvent(entity.getBukkitLivingEntity(), stack.asBukkitMirror(), org.bukkit.craftbukkit.CraftEquipmentSlot.getHand(entity.getUsedItemHand()));
+            if (!event.callEvent() || !tryLoadProjectiles(entity, stack, event.shouldConsumeItem()) || !event.shouldConsumeItem()) {
+                if (entity instanceof ServerPlayer player) player.containerMenu.sendAllDataToRemote();
+                return false;
+            }
+            // Paper end - Add EntityLoadCrossbowEvent
             CrossbowItem.ChargingSounds chargingSounds = this.getChargingSounds(stack);
             chargingSounds.end()
                 .ifPresent(
@@ -111,8 +118,14 @@ public class CrossbowItem extends ProjectileWeaponItem {
         }
     }
 
+    @io.papermc.paper.annotation.DoNotUse // Paper - Add EntityLoadCrossbowEvent
     private static boolean tryLoadProjectiles(LivingEntity shooter, ItemStack crossbowStack) {
-        List<ItemStack> list = draw(crossbowStack, shooter.getProjectile(crossbowStack), shooter);
+        // Paper start - Add EntityLoadCrossbowEvent
+        return CrossbowItem.tryLoadProjectiles(shooter, crossbowStack, true);
+    }
+    private static boolean tryLoadProjectiles(LivingEntity shooter, ItemStack crossbowStack, boolean consume) {
+        List<ItemStack> list = draw(crossbowStack, shooter.getProjectile(crossbowStack), shooter, consume);
+        // Paper end - Add EntityLoadCrossbowEvent
         if (!list.isEmpty()) {
             crossbowStack.set(DataComponents.CHARGED_PROJECTILES, ChargedProjectiles.of(list));
             return true;
@@ -164,7 +177,11 @@ public class CrossbowItem extends ProjectileWeaponItem {
     @Override
     protected Projectile createProjectile(Level level, LivingEntity shooter, ItemStack weapon, ItemStack ammo, boolean isCrit) {
         if (ammo.is(Items.FIREWORK_ROCKET)) {
-            return new FireworkRocketEntity(level, ammo, shooter, shooter.getX(), shooter.getEyeY() - 0.15F, shooter.getZ(), true);
+            // Paper start
+            FireworkRocketEntity entity =  new FireworkRocketEntity(level, ammo, shooter, shooter.getX(), shooter.getEyeY() - 0.15F, shooter.getZ(), true);
+            entity.spawningEntity = shooter.getUUID(); // Paper
+            return entity;
+            // Paper end
         } else {
             Projectile projectile = super.createProjectile(level, shooter, weapon, ammo, isCrit);
             if (projectile instanceof AbstractArrow abstractArrow) {
